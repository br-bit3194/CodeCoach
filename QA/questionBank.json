[
    { "id": "EMPTY-01", "question": "", "expected_keywords": ["no question", "empty"], "section": "Empty Question"}, 
    
    { "id": "GO-01", "question": "What is this e-commerce project about?", "expected_keywords": ["e-commerce", "microservices", "Django", "backend", "demo"], "section": "General Onboarding" },
    { "id": "GO-02", "question": "What problem does this e-commerce system solve?", "expected_keywords": ["scalable", "modular", "independent services", "microservices architecture"], "section": "General Onboarding" },
    { "id": "GO-03", "question": "What are the key features of this e-commerce system?", "expected_keywords": ["user management", "product catalog", "order processing", "payment", "categories"], "section": "General Onboarding" },
    { "id": "GO-04", "question": "How does this project demonstrate microservices patterns?", "expected_keywords": ["distributed", "microservices", "service communication", "HTTP", "SQS"], "section": "General Onboarding" },

    { "id": "TO-01", "question": "What technology stack is used in this e-commerce project?", "expected_keywords": ["Django", "Python", "Docker", "SQLite"], "section": "Technical Overview" },
    { "id": "TO-02", "question": "What are the main external dependencies and integrations?", "expected_keywords": ["Razorpay", "AWS SQS", "LocalStack"], "section": "Technical Overview" },
    { "id": "TO-03", "question": "What databases are used and what do they store?", "expected_keywords": ["SQLite", "user data", "products", "orders", "payments"], "section": "Technical Overview" },
    { "id": "TO-04", "question": "How are the services containerized and deployed?", "expected_keywords": ["Docker", "docker-compose", "containers", "volumes"], "section": "Technical Overview" },
    { "id": "TO-05", "question": "What documentation tools are used for APIs?", "expected_keywords": ["Swagger", "drf-yasg", "OpenAPI", "redoc"], "section": "Technical Overview" },

    { "id": "AD-01", "question": "What is the overall microservices architecture?", "expected_keywords": ["user_service", "product_service", "order_service", "payment_service"], "section": "Architecture & Design" },
    { "id": "AD-02", "question": "How do the microservices communicate with each other?", "expected_keywords": ["HTTP", "AWS SQS", "message queues", "REST API"], "section": "Architecture & Design" },
    { "id": "AD-03", "question": "How does the message queue system work?", "expected_keywords": ["SQS", "LocalStack", "order-queue", "payment-queue"], "section": "Architecture & Design" },
    { "id": "AD-04", "question": "What ports do the different services run on?", "expected_keywords": ["8000", "8001", "8002", "8003", "4566"], "section": "Architecture & Design" },
    { "id": "AD-05", "question": "What is LocalStack and how is it used?", "expected_keywords": ["LocalStack", "AWS SQS emulation", "local development"], "section": "Architecture & Design" },
    { "id": "AD-06", "question": "How is correlation ID tracking implemented?", "expected_keywords": ["CorrelationIdMiddleware", "X-Correlation-ID", "request tracing"], "section": "Architecture & Design" },

    { "id": "US-01", "question": "What are the API endpoints in user service?", "expected_keywords": ["register", "user_detail", "8000"], "section": "User Service" },
    { "id": "US-02", "question": "What Django models exist in user service?", "expected_keywords": ["Users", "name", "email", "AuditModel"], "section": "User Service" },
    { "id": "US-03", "question": "How does user registration work?", "expected_keywords": ["register", "UserSerializer", "POST", "validation"], "section": "User Service" },

    { "id": "PS-01", "question": "What are the API endpoints in product service?", "expected_keywords": ["products", "categories", "filter_products", "check_stock", "health", "8001"], "section": "Product Service" },
    { "id": "PS-02", "question": "What Django models exist in product service?", "expected_keywords": ["Products", "Category", "price", "stock_quantity", "description"], "section": "Product Service" },
    { "id": "PS-03", "question": "How does product filtering work?", "expected_keywords": ["filter_products", "name", "description", "price", "Q objects"], "section": "Product Service" },
    { "id": "PS-04", "question": "How is stock management implemented?", "expected_keywords": ["check_stock", "stock_quantity", "ProductManager"], "section": "Product Service" },

    { "id": "OS-01", "question": "What are the API endpoints in order service?", "expected_keywords": ["orders", "OrderView", "GET", "POST", "8002"], "section": "Order Service" },
    { "id": "OS-02", "question": "What Django models exist in order service?", "expected_keywords": ["Order", "OrderItems", "user_id", "total_price", "status"], "section": "Order Service" },
    { "id": "OS-03", "question": "How does order creation work?", "expected_keywords": ["create", "OrderManager", "stock validation", "user validation"], "section": "Order Service" },
    { "id": "OS-04", "question": "What order statuses are supported?", "expected_keywords": ["pending", "success", "failed", "OrderStatus"], "section": "Order Service" },
    { "id": "OS-05", "question": "How does order service send payment requests?", "expected_keywords": ["send_payment_init_message", "SQS", "payment_sqs_service"], "section": "Order Service" },

    { "id": "PY-01", "question": "What are the API endpoints in payment service?", "expected_keywords": ["create_payment_link", "payment_link_callback", "8003"], "section": "Payment Service" },
    { "id": "PY-02", "question": "What Django models exist in payment service?", "expected_keywords": ["Payment", "razorpay_order_id", "amount", "currency", "status"], "section": "Payment Service" },
    { "id": "PY-03", "question": "How does Razorpay integration work?", "expected_keywords": ["RazorpayService", "create_payment_link", "RAZORPAY_KEY_ID", "RAZORPAY_KEY_SECRET"], "section": "Payment Service" },
    { "id": "PY-04", "question": "How are payment callbacks handled?", "expected_keywords": ["payment_link_callback", "callback_url", "payment status"], "section": "Payment Service" },
    { "id": "PY-05", "question": "How does payment service notify order service?", "expected_keywords": ["send_order_status_update", "SQS", "order_sqs_service"], "section": "Payment Service" },

    { "id": "CU-01", "question": "Where is the main entry point of each Django service?", "expected_keywords": ["manage.py", "Django", "runserver"], "section": "Code Understanding" },
    { "id": "CU-02", "question": "How are Docker containers configured for each service?", "expected_keywords": ["Dockerfile", "container", "build", "Python 3.12"], "section": "Code Understanding" },
    { "id": "CU-03", "question": "How does the docker-compose setup work?", "expected_keywords": ["docker-compose.yml", "services", "volumes", "depends_on"], "section": "Code Understanding" },
    { "id": "CU-04", "question": "What is the init_localstack.sh script for?", "expected_keywords": ["init_localstack.sh", "SQS queues", "awslocal", "create-queue"], "section": "Code Understanding" },
    { "id": "CU-05", "question": "What middleware is used across all services?", "expected_keywords": ["CorrelationIdMiddleware", "custom_middlewares", "X-Correlation-ID"], "section": "Code Understanding" },

    { "id": "WI-01", "question": "How does a complete order flow work from user to payment?", "expected_keywords": ["user registration", "product selection", "order creation", "payment link", "callback"], "section": "Workflow & Integration" },
    { "id": "WI-02", "question": "What happens when a payment is processed?", "expected_keywords": ["payment_service", "callback", "order update", "SQS message"], "section": "Workflow & Integration" },
    { "id": "WI-03", "question": "How do services communicate using message queues?", "expected_keywords": ["SQS", "queue", "async", "messaging", "poll_sqs"], "section": "Workflow & Integration" },
    { "id": "WI-04", "question": "How does SQS message processing work?", "expected_keywords": ["poll_sqs", "message polling", "delete_message", "correlation_id"], "section": "Workflow & Integration" },
    { "id": "WI-05", "question": "How does stock validation work across services?", "expected_keywords": ["check_stock", "HTTP request", "product_service", "validation"], "section": "Workflow & Integration" },

    { "id": "DB-01", "question": "What database schema is used in user service?", "expected_keywords": ["Users", "name", "email", "unique constraint"], "section": "Database Schema" },
    { "id": "DB-02", "question": "What database schema is used in product service?", "expected_keywords": ["Products", "Category", "price", "stock_quantity", "ForeignKey"], "section": "Database Schema" },
    { "id": "DB-03", "question": "What database schema is used in order service?", "expected_keywords": ["Order", "OrderItems", "user_id", "product_id", "total_price"], "section": "Database Schema" },
    { "id": "DB-04", "question": "What database schema is used in payment service?", "expected_keywords": ["Payment", "razorpay_order_id", "amount", "currency", "receipt"], "section": "Database Schema" },

    { "id": "MC-01", "question": "What management commands are available in order service?", "expected_keywords": ["poll_sqs", "management", "commands"], "section": "Management Commands" },
    { "id": "MC-02", "question": "What management commands are available in payment service?", "expected_keywords": ["poll_sqs", "management", "commands"], "section": "Management Commands" },

    { "id": "SP-01", "question": "What are the exact field names in the Users model?", "expected_keywords": ["name", "email", "created_at", "updated_at"], "section": "Specificity Tests" },
    { "id": "SP-02", "question": "What HTTP status codes are returned by user registration?", "expected_keywords": ["201", "400", "500"], "section": "Specificity Tests" },
    { "id": "SP-03", "question": "What are the exact queue names used in LocalStack?", "expected_keywords": ["order-queue", "payment-queue"], "section": "Specificity Tests" },
    { "id": "SP-04", "question": "What is the exact port number for payment service?", "expected_keywords": ["8003"], "section": "Specificity Tests" },
    { "id": "SP-05", "question": "What currency is used by default in Payment model?", "expected_keywords": ["INR"], "section": "Specificity Tests" },
    { "id": "SP-06", "question": "What are the exact order status choices?", "expected_keywords": ["pending", "success", "failed"], "section": "Specificity Tests" },
    { "id": "SP-07", "question": "What Django ORM features are used in product filtering?", "expected_keywords": ["Q objects", "icontains", "filter"], "section": "Specificity Tests" },
    { "id": "SP-08", "question": "What is the exact correlation ID header name?", "expected_keywords": ["X-Correlation-ID"], "section": "Specificity Tests" },

    { "id": "EC-01", "question": "What happens when Razorpay payment fails?", "expected_keywords": ["failed status", "error handling", "order update"], "section": "Edge Cases" },
    { "id": "EC-02", "question": "How does the system handle out-of-stock products?", "expected_keywords": ["stock validation", "check_stock", "insufficient"], "section": "Edge Cases" },
    { "id": "EC-03", "question": "What occurs when SQS message processing fails?", "expected_keywords": ["error handling", "exception", "logging"], "section": "Edge Cases" },
    { "id": "EC-04", "question": "How does the system handle duplicate user email registration?", "expected_keywords": ["unique constraint", "error", "validation"], "section": "Edge Cases" },
    { "id": "EC-05", "question": "What happens if LocalStack is unavailable during order creation?", "expected_keywords": ["SQS unavailable", "connection error", "service failure"], "section": "Edge Cases" },
    { "id": "EC-06", "question": "How are invalid product IDs handled in order creation?", "expected_keywords": ["validation", "product not found", "error"], "section": "Edge Cases" },
    { "id": "EC-07", "question": "What happens when payment callback URL is unreachable?", "expected_keywords": ["callback failure", "timeout", "retry"], "section": "Edge Cases" },
    { "id": "EC-08", "question": "How does the system handle missing environment variables?", "expected_keywords": ["configuration error", "missing", "startup failure"], "section": "Edge Cases" },

    { "id": "CX-01", "question": "Why does OrderItems use product_id instead of a ForeignKey?", "expected_keywords": ["microservices", "loose coupling", "service separation"], "section": "Context Understanding" },
    { "id": "CX-02", "question": "Why are there separate queues for orders and payments?", "expected_keywords": ["decoupling", "async", "service isolation"], "section": "Context Understanding" },
    { "id": "CX-03", "question": "Why is correlation ID tracking important in microservices?", "expected_keywords": ["tracing", "debugging", "distributed"], "section": "Context Understanding" },
    { "id": "CX-04", "question": "Why does each service have its own database?", "expected_keywords": ["data isolation", "microservices", "independence"], "section": "Context Understanding" },
    { "id": "CX-05", "question": "Why is LocalStack used instead of real AWS SQS?", "expected_keywords": ["local development", "testing", "emulation"], "section": "Context Understanding" },

    { "id": "UN-01", "question": "What database optimization techniques are used?", "expected_keywords": ["not specified", "not implemented", "unclear", "not found"], "section": "Uncertainty Handling" },
    { "id": "UN-02", "question": "What caching strategy is implemented?", "expected_keywords": ["no caching", "not mentioned", "not found"], "section": "Uncertainty Handling" },
    { "id": "UN-03", "question": "How is load balancing configured?", "expected_keywords": ["not configured", "not specified", "not implemented"], "section": "Uncertainty Handling" },
    { "id": "UN-04", "question": "What monitoring tools are integrated?", "expected_keywords": ["not specified", "not implemented", "logging only"], "section": "Uncertainty Handling" },

    { "id": "IR-01", "question": "What's the weather today?", "expected_keywords": ["project", "cannot help", "outside scope"], "section": "Irrelevant" },
    { "id": "IR-02", "question": "Who won the last FIFA World Cup?", "expected_keywords": ["outside scope", "cannot help"], "section": "Irrelevant" },
    { "id": "IR-03", "question": "Can you teach me guitar basics?", "expected_keywords": ["project knowledge", "cannot help"], "section": "Irrelevant" },

    { "id": "CT-01", "question": "What is the purpose of inventory_service.py?", "expected_keywords": ["file not found", "does not exist"], "section": "Code Trap" },
    { "id": "CT-02", "question": "What does shipping_service do?", "expected_keywords": ["service not found", "does not exist"], "section": "Code Trap" },
    { "id": "CT-03", "question": "What does the deleteAllOrdersImmediately() function do?", "expected_keywords": ["function not found", "does not exist"], "section": "Code Trap" },
    { "id": "CT-04", "question": "Where is the couponEngine module used?", "expected_keywords": ["module not found", "does not exist"], "section": "Code Trap" },
    { "id": "CT-05", "question": "How is the notification_service implemented?", "expected_keywords": ["service not found", "does not exist"], "section": "Code Trap" },
    { "id": "CT-06", "question": "How does the CartService handle session management?", "expected_keywords": ["service not found", "does not exist"], "section": "Code Trap" },
    { "id": "CT-07", "question": "What is the purpose of the AuditLogger middleware?", "expected_keywords": ["middleware not found", "does not exist"], "section": "Code Trap" },
    { "id": "CT-08", "question": "How is the ProductRecommendation model implemented?", "expected_keywords": ["model not found", "does not exist"], "section": "Code Trap" },
    { "id": "CT-09", "question": "What does the EmailNotification service do?", "expected_keywords": ["service not found", "does not exist"], "section": "Code Trap" },
    { "id": "CT-10", "question": "How is the DiscountCalculator utility used?", "expected_keywords": ["utility not found", "does not exist"], "section": "Code Trap" },
    { "id": "CT-11", "question": "What is the CustomerDashboard component for?", "expected_keywords": ["component not found", "does not exist"], "section": "Code Trap" },
    { "id": "CT-12", "question": "How does the WishlistManager work?", "expected_keywords": ["manager not found", "does not exist"], "section": "Code Trap" },
    { "id": "CT-13", "question": "What is the SearchEngine service responsible for?", "expected_keywords": ["service not found", "does not exist"], "section": "Code Trap" },
    { "id": "CT-14", "question": "How is the ReviewSystem implemented?", "expected_keywords": ["system not found", "does not exist"], "section": "Code Trap" },
    { "id": "CT-15", "question": "What does the LoyaltyProgram module handle?", "expected_keywords": ["module not found", "does not exist"], "section": "Code Trap" },

    { "id": "FS-01", "question": "What does the users/models.py file contain?", "expected_keywords": ["Users", "AuditModel", "name", "email"], "section": "File Specific" },
    { "id": "FS-02", "question": "What functions are defined in users/views.py?", "expected_keywords": ["register", "get_user_details"], "section": "File Specific" },
    { "id": "FS-03", "question": "What does the register() function in users/views.py do?", "expected_keywords": ["user registration", "UserSerializer", "validation", "POST"], "section": "File Specific" },
    { "id": "FS-04", "question": "What classes are in users/serializers.py?", "expected_keywords": ["UserSerializer", "RegisterSerializer"], "section": "File Specific" },
    { "id": "FS-05", "question": "What does users/custom_middlewares.py implement?", "expected_keywords": ["CorrelationIdMiddleware", "X-Correlation-ID", "uuid"], "section": "File Specific" },

    { "id": "FS-06", "question": "What models are defined in products/models.py?", "expected_keywords": ["Products", "Category", "AuditModel"], "section": "File Specific" },
    { "id": "FS-07", "question": "What does the health_check() function in products/views.py return?", "expected_keywords": ["status", "healthy", "JsonResponse"], "section": "File Specific" },
    { "id": "FS-08", "question": "What methods are in the ProductManager class?", "expected_keywords": ["list_all_products", "create_product", "filter_products", "check_stock"], "section": "File Specific" },
    { "id": "FS-09", "question": "What does the filter_products() method in ProductManager do?", "expected_keywords": ["Q objects", "name", "description", "price", "filter"], "section": "File Specific" },
    { "id": "FS-10", "question": "What file contains the ProductsView class?", "expected_keywords": ["products/views.py"], "section": "File Specific" },

    { "id": "FS-11", "question": "What models are in orders/models.py?", "expected_keywords": ["Order", "OrderItems", "AuditModel"], "section": "File Specific" },
    { "id": "FS-12", "question": "What does the OrderView class in orders/views.py handle?", "expected_keywords": ["GET", "POST", "orders", "APIView"], "section": "File Specific" },
    { "id": "FS-13", "question": "What methods are in the OrderManager class?", "expected_keywords": ["list_all_orders", "create_order", "check_product_stock", "get_user_details_by_id"], "section": "File Specific" },
    { "id": "FS-14", "question": "What does send_payment_init_message() function do?", "expected_keywords": ["SQS", "payment", "order_id", "amount", "boto3"], "section": "File Specific" },
    { "id": "FS-15", "question": "What file contains the poll_sqs management command for orders?", "expected_keywords": ["orders/management/commands/poll_sqs.py"], "section": "File Specific" },

    { "id": "FS-16", "question": "What model is defined in payments/models.py?", "expected_keywords": ["Payment", "AuditLog", "razorpay_order_id"], "section": "File Specific" },
    { "id": "FS-17", "question": "What functions are in payments/views.py?", "expected_keywords": ["create_payment_link", "payment_link_callback"], "section": "File Specific" },
    { "id": "FS-18", "question": "What does the create_payment_link() function do?", "expected_keywords": ["payment link", "Razorpay", "order_id", "amount"], "section": "File Specific" },
    { "id": "FS-19", "question": "What class is defined in payments/services/razorpay_service.py?", "expected_keywords": ["RazorpayService", "IPaymentGateway"], "section": "File Specific" },
    { "id": "FS-20", "question": "What does send_order_status_update() function do?", "expected_keywords": ["SQS", "order status", "payment_service", "order_id"], "section": "File Specific" },

    { "id": "FS-21", "question": "What does the docker-compose.yml file configure?", "expected_keywords": ["services", "ports", "volumes", "depends_on"], "section": "File Specific" },
    { "id": "FS-22", "question": "What does init_localstack.sh script do?", "expected_keywords": ["awslocal", "create-queue", "order-queue", "payment-queue"], "section": "File Specific" },
    { "id": "FS-23", "question": "What does the check_product_stock() method in OrderManager do?", "expected_keywords": ["HTTP request", "PRODUCT_SERVICE_URL", "stock validation"], "section": "File Specific" },
    { "id": "FS-24", "question": "What interface does RazorpayService implement?", "expected_keywords": ["IPaymentGateway", "interface", "abstract"], "section": "File Specific" },
    { "id": "FS-25", "question": "What does the CorrelationIdMiddleware.__call__() method do?", "expected_keywords": ["correlation_id", "uuid", "request", "response"], "section": "File Specific" },

    { "id": "FN-01", "question": "What parameters does the register() function accept?", "expected_keywords": ["request", "POST", "data"], "section": "Function Specific" },
    { "id": "FN-02", "question": "What does get_user_details() function return?", "expected_keywords": ["user", "UserSerializer", "Response"], "section": "Function Specific" },
    { "id": "FN-03", "question": "What HTTP methods does ProductsView.get() handle?", "expected_keywords": ["GET", "list", "products"], "section": "Function Specific" },
    { "id": "FN-04", "question": "What does ProductsView.post() method do?", "expected_keywords": ["POST", "create", "product", "ProductManager"], "section": "Function Specific" },
    { "id": "FN-05", "question": "What parameters does filter_products() in ProductManager take?", "expected_keywords": ["filters", "name", "description", "price"], "section": "Function Specific" },
    { "id": "FN-06", "question": "What does OrderView.post() method validate?", "expected_keywords": ["stock", "user", "validation", "OrderManager"], "section": "Function Specific" },
    { "id": "FN-07", "question": "What parameters does send_payment_init_message() require?", "expected_keywords": ["request_id", "order_id", "amount", "customer_name", "customer_email"], "section": "Function Specific" },
    { "id": "FN-08", "question": "What does payment_link_callback() function handle?", "expected_keywords": ["callback", "payment status", "Razorpay"], "section": "Function Specific" },
    { "id": "FN-09", "question": "What does the check_stock() method in ProductManager return?", "expected_keywords": ["stock", "availability", "boolean"], "section": "Function Specific" },
    { "id": "FN-10", "question": "What exception handling is in the register() function?", "expected_keywords": ["try", "except", "exception", "error"], "section": "Function Specific" }
]